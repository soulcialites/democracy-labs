{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "founders",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "democracyV1",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "citizen",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "Issued",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "citizen",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "Revoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MY_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "name": "createGuild",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "guild",
          "type": "address"
        }
      ],
      "name": "getDAO",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "founders",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "guilds",
              "type": "address[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "id",
                  "type": "bytes32"
                },
                {
                  "internalType": "string",
                  "name": "title",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "body",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "category",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "createdAt",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "parentGuild",
                  "type": "string"
                },
                {
                  "internalType": "bool",
                  "name": "isActive",
                  "type": "bool"
                }
              ],
              "internalType": "struct IGuild.Proposal[]",
              "name": "proposals",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct CitizenV1.DAOView",
          "name": "dao",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDAOStream",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "founders",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "guilds",
              "type": "address[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "id",
                  "type": "bytes32"
                },
                {
                  "internalType": "string",
                  "name": "title",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "body",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "category",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "createdAt",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "parentGuild",
                  "type": "string"
                },
                {
                  "internalType": "bool",
                  "name": "isActive",
                  "type": "bool"
                }
              ],
              "internalType": "struct IGuild.Proposal[]",
              "name": "proposals",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct CitizenV1.DAOView",
          "name": "dao",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "citizen",
          "type": "address"
        }
      ],
      "name": "getDID",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFounders",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "guild",
          "type": "address"
        }
      ],
      "name": "getGuildProposals",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "body",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "category",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "createdAt",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "parentGuild",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            }
          ],
          "internalType": "struct IGuild.Proposal[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGuilds",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "citizen",
          "type": "address"
        }
      ],
      "name": "isCitizen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "issue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "citizenId",
          "type": "uint256"
        }
      ],
      "name": "revoke",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "did",
          "type": "string"
        }
      ],
      "name": "setDID",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalCitizens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x56a5c7929ba77dc95ded3e9af54418dc5f81f6104b95d9ef7c64dc6998be6e27",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "5178297",
    "logsBloom": "0x
    "blockHash": "0x68a9dd130a6871c16283b2b9e5908363af8e7df7944a3730c78e807460bf50c2",
    "transactionHash": "0x56a5c7929ba77dc95ded3e9af54418dc5f81f6104b95d9ef7c64dc6998be6e27",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0x56a5c7929ba77dc95ded3e9af54418dc5f81f6104b95d9ef7c64dc6998be6e27",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000fb374787b0bb7e62bd82a1b020b12fa239ab788",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x68a9dd130a6871c16283b2b9e5908363af8e7df7944a3730c78e807460bf50c2"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0x56a5c7929ba77dc95ded3e9af54418dc5f81f6104b95d9ef7c64dc6998be6e27",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000fb374787b0bb7e62bd82a1b020b12fa239ab788",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x68a9dd130a6871c16283b2b9e5908363af8e7df7944a3730c78e807460bf50c2"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0x56a5c7929ba77dc95ded3e9af54418dc5f81f6104b95d9ef7c64dc6998be6e27",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x3c919ce539f5b48cdd3b70d26319a61596a5ff44fb77a82b76e90c9924bbe12f",
          "0x0000000000000000000000000fb374787b0bb7e62bd82a1b020b12fa239ab788",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x68a9dd130a6871c16283b2b9e5908363af8e7df7944a3730c78e807460bf50c2"
      }
    ],
    "blockNumber": 1,
    "cumulativeGasUsed": "5178297",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0x0fB374787B0bB7e62bD82A1B020b12fa239aB788"
    ],
    "0x0fB374787B0bB7e62bD82A1B020b12fa239aB788"
  ],
  "numDeployments": 1,
  "solcInputHash": "0394eacd83e86d6f27918f68c1bcf690",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"founders\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"democracyV1\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"citizen\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Issued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"citizen\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Revoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"createGuild\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guild\",\"type\":\"address\"}],\"name\":\"getDAO\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"founders\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"guilds\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"body\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"createdAt\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"parentGuild\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"internalType\":\"struct IGuild.Proposal[]\",\"name\":\"proposals\",\"type\":\"tuple[]\"}],\"internalType\":\"struct CitizenV1.DAOView\",\"name\":\"dao\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDAOStream\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"founders\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"guilds\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"body\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"createdAt\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"parentGuild\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"internalType\":\"struct IGuild.Proposal[]\",\"name\":\"proposals\",\"type\":\"tuple[]\"}],\"internalType\":\"struct CitizenV1.DAOView\",\"name\":\"dao\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"citizen\",\"type\":\"address\"}],\"name\":\"getDID\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFounders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guild\",\"type\":\"address\"}],\"name\":\"getGuildProposals\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"body\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"createdAt\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"parentGuild\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"internalType\":\"struct IGuild.Proposal[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGuilds\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"citizen\",\"type\":\"address\"}],\"name\":\"isCitizen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"issue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"citizenId\",\"type\":\"uint256\"}],\"name\":\"revoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"}],\"name\":\"setDID\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCitizens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"The returned value may be a base64 encoded data URI or an API URL.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"tokenURI(uint256)\":{\"notice\":\"Given a token ID and seed, construct a token URI for an official Nouns DAO noun.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CitizenV1.sol\":\"CitizenV1\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb4d87ee2ead4bd192b41c128f287d4b7f24b9e0cd740cc9b476881c461286007\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x921f012325281f7d81e29c53a13824cf6c2c5d77232065d0d4f3f912e97af6ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"contracts/CitizenV1.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport { Base64 } from \\\"base64-sol/base64.sol\\\";\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport { AccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport { Guild, IGuild } from \\\"./GuildV1.sol\\\";\\n\\ncontract CitizenV1 is ERC721, AccessControl {\\n  using Strings for uint256;\\n  using Strings for address;\\n  uint256 public totalCitizens;\\n\\n  mapping(address => bool) private _isCitizen;\\n  mapping(address => string) private _citizenDID;\\n  mapping(uint256 => string) private _citizenAlias;\\n\\n  bytes32 public constant MY_ROLE = keccak256(\\\"FOUNDERS\\\");\\n\\n  event Issued(address indexed citizen, uint256 id);\\n  event Revoked(address indexed citizen, uint256 id);\\n\\n  struct DAOStorage {\\n    address[] founders;\\n    address[] guilds;\\n  }\\n\\n  struct DAOView {\\n    address[] founders;\\n    address[] guilds;\\n    IGuild.Proposal[] proposals;\\n  }\\n\\n  DAOStorage private dao;\\n\\n  constructor(address[] memory founders, address democracyV1)\\n    ERC721(\\\"Citizen\\\", \\\"CIZ\\\")\\n    AccessControl()\\n  {\\n    address[] memory guilds;\\n    dao = DAOStorage(founders, guilds);\\n\\n    for (uint256 index = 0; index < founders.length; index++) {\\n      uint256 _totalCitizens = totalCitizens++;\\n      _mint(founders[index], _totalCitizens);\\n      _citizenAlias[_totalCitizens] = \\\"anon\\\";\\n      _setupRole(\\n        0x0000000000000000000000000000000000000000000000000000000000000000,\\n        founders[index]\\n      );\\n      _setupRole(MY_ROLE, founders[index]);\\n    }\\n  }\\n\\n  /* ================================================================================ */\\n  /* External Functions                                                               */\\n  /* ================================================================================ */\\n\\n  function getDAOStream() public returns (DAOView memory dao) {\\n    return dao;\\n\\n    IGuild.Proposal[] storage guildProposals;\\n    for (uint256 index = 0; index < dao.guilds.length; index++) {\\n      Guild guild_ = Guild(dao.guilds[index]);\\n      IGuild.Proposal memory proposals = guild_.getProposal(1);\\n      guildProposals.push(proposals);\\n      // for (uint256 i = 0; i < proposals_.length; i++) {\\n      //   guildProposals.push(proposals_[i]);\\n      // }\\n    }\\n\\n    return DAOView({ founders: dao.founders, guilds: dao.guilds, proposals: guildProposals });\\n  }\\n\\n  function getDAO(address guild) public payable returns (DAOView memory dao) {\\n    return dao;\\n\\n    IGuild.Proposal[] memory guildProposals;\\n    for (uint256 index = 0; index < dao.guilds.length; index++) {}\\n\\n    return DAOView({ founders: dao.founders, guilds: dao.guilds, proposals: guildProposals });\\n  }\\n\\n  function getGuilds() external returns (address[] memory) {\\n    return dao.guilds;\\n  }\\n\\n  function getFounders() external returns (address[] memory) {\\n    return dao.founders;\\n  }\\n\\n  // External Guild Management\\n\\n  function createGuild(string memory name, string memory symbol) public {\\n    Guild guild_ = new Guild(name, symbol, address(this));\\n    dao.guilds.push(address(guild_));\\n  }\\n\\n  function getGuildProposals(address guild) external returns (IGuild.Proposal[] memory) {\\n    Guild guild_ = Guild(guild);\\n    return guild_.getProposals();\\n  }\\n\\n  // Soulbound Tokens\\n\\n  function issue(address to, string calldata name) external {\\n    require(!isCitizen(to), \\\"Existing Citizen\\\");\\n    uint256 _totalCitizens = totalCitizens++;\\n    _citizenAlias[_totalCitizens] = name;\\n    _mint(to, _totalCitizens);\\n    // emit Issued(to, _totalCitizens);\\n  }\\n\\n  function revoke(uint256 citizenId) external {\\n    _burn(totalCitizens);\\n    // emit Revoked(citizenId);\\n  }\\n\\n  function isCitizen(address citizen) public returns (bool) {\\n    return _isCitizen[citizen];\\n  }\\n\\n  function getDID(address citizen) public returns (string memory) {\\n    return _citizenDID[citizen];\\n  }\\n\\n  function setDID(string calldata did) public returns (string memory) {\\n    return _citizenDID[msg.sender] = did;\\n  }\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) public virtual override {\\n    require(false, \\\"CitizenAlpha: Keep your Soul \\\");\\n  }\\n\\n  /**\\n   * @notice Given a token ID and seed, construct a token URI for an official Nouns DAO noun.\\n   * @dev The returned value may be a base64 encoded data URI or an API URL.\\n   */\\n  function tokenURI(uint256 tokenId) public view override returns (string memory) {\\n    return _constructTokenURI(tokenId);\\n  }\\n\\n  /* ================================================================================ */\\n  /* Internal Functions                                                               */\\n  /* ================================================================================ */\\n\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    virtual\\n    override(ERC721, AccessControl)\\n    returns (bool)\\n  {\\n    return super.supportsInterface(interfaceId);\\n  }\\n\\n  function _constructTokenURI(uint256 _tokenId) internal view returns (string memory) {\\n    string memory description = string(abi.encodePacked(\\\"Citizen #\\\", _tokenId.toString()));\\n    string memory name = \\\"Citizen\\\";\\n    string memory image = \\\"\\\";\\n    string memory citizenALIAS = _citizenAlias[_tokenId];\\n\\n    // address _owner = ownerOf(_tokenId--);\\n    address _owner = address(this);\\n\\n    return\\n      string(\\n        abi.encodePacked(\\n          \\\"data:application/json;base64,\\\",\\n          Base64.encode(\\n            bytes(\\n              abi.encodePacked(\\n                '{\\\"name\\\":\\\"',\\n                name,\\n                \\\":\\\",\\n                citizenALIAS,\\n                '\\\", \\\"description\\\":\\\"',\\n                description,\\n                '\\\", \\\"image\\\": \\\"',\\n                \\\"data:image/svg+xml;base64,\\\",\\n                image,\\n                '\\\"}'\\n              )\\n            )\\n          )\\n        )\\n      );\\n  }\\n}\\n\",\"keccak256\":\"0xf14389d6e041312f3001dd799873f3aac7296ed5d997cf966180dbfb593885f8\",\"license\":\"MIT\"},\"contracts/GuildV1.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport { AccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport { Base64 } from \\\"base64-sol/base64.sol\\\";\\nimport { MemberV1 } from \\\"./MemberV1.sol\\\";\\n\\ninterface IGuild {\\n  struct Proposal {\\n    bytes32 id;\\n    string title;\\n    string body;\\n    string category;\\n    string createdAt;\\n    string parentGuild;\\n    bool isActive;\\n  }\\n\\n  function getProposals() external view returns (Proposal[] memory);\\n}\\n\\ncontract Guild is MemberV1, IGuild {\\n  Proposal[] private proposals_;\\n\\n  constructor(\\n    string memory name,\\n    string memory symbol,\\n    address manager\\n  ) MemberV1(name, symbol, manager) {}\\n\\n  function getProposal(uint256 index) external view returns (Proposal memory) {\\n    return proposals_[index];\\n  }\\n\\n  function getProposals() external view override returns (Proposal[] memory) {\\n    return proposals_;\\n  }\\n}\\n\",\"keccak256\":\"0xdd048d19b64972d20e66b7d5122d221211f5ce135766b1064a6352be1da335c8\",\"license\":\"MIT\"},\"contracts/MemberV1.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\n\\ncontract MemberV1 is ERC721 {\\n  uint256 public totalCitizens;\\n\\n  mapping(address => bool) private _isCitizen;\\n  mapping(address => string) private _citizenDID;\\n\\n  constructor(\\n    string memory name,\\n    string memory symbol,\\n    address citizenV1\\n  ) ERC721(name, symbol) {}\\n\\n  function issue(address to) external {\\n    isCitizen(to);\\n    _mint(to, totalCitizens);\\n  }\\n\\n  function revoke(uint256 citizenId) external {\\n    _burn(totalCitizens);\\n  }\\n\\n  function isCitizen(address citizen) public returns (bool) {\\n    return _isCitizen[citizen];\\n  }\\n\\n  function getDID(address citizen) public returns (string memory) {\\n    return _citizenDID[citizen];\\n  }\\n\\n  function setDID(string calldata did) public returns (string memory) {\\n    return _citizenDID[msg.sender] = did;\\n  }\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) public virtual override {\\n    require(false, \\\"CitizenAlpha: Keep your Soul \\\");\\n  }\\n}\\n\",\"keccak256\":\"0x1de7443089ea1a59c8cf6ed6bf3e9ad306c3db3667ff5da672cbe20e15fb0acb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162005f8738038062005f878339810160408190526200003491620004b5565b6040518060400160405280600781526020016621b4ba34bd32b760c91b8152506040518060400160405280600381526020016221a4ad60e91b815250816000908162000081919062000629565b50600162000090828262000629565b505060408051808201909152838152606060208083018290528551919350600b91620000c29183919088019062000401565b506020828101518051620000dd926001850192019062000401565b5090505060005b8351811015620001f557600780546000918262000101836200070b565b9190505590506200013585838151811062000120576200012062000727565b602002602001015182620001ff60201b60201c565b6040518060400160405280600481526020016330b737b760e11b815250600a6000838152602001908152602001600020908162000173919062000629565b50620001a56000801b86848151811062000191576200019162000727565b60200260200101516200034c60201b60201c565b620001df7f3c919ce539f5b48cdd3b70d26319a61596a5ff44fb77a82b76e90c9924bbe12f86848151811062000191576200019162000727565b5080620001ec816200070b565b915050620000e4565b5050505062000758565b6001600160a01b0382166200025b5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064015b60405180910390fd5b6000818152600260205260409020546001600160a01b031615620002c25760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640162000252565b6001600160a01b0382166000908152600360205260408120805460019290620002ed9084906200073d565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45b5050565b6200034882826200035d565b505050565b60008281526006602090815260408083206001600160a01b038516845290915290205460ff16620003485760008281526006602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620003bd3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b82805482825590600052602060002090810192821562000459579160200282015b828111156200045957825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062000422565b50620004679291506200046b565b5090565b5b808211156200046757600081556001016200046c565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b0381168114620004b057600080fd5b919050565b60008060408385031215620004c957600080fd5b82516001600160401b0380821115620004e157600080fd5b818501915085601f830112620004f657600080fd5b81516020828211156200050d576200050d62000482565b8160051b604051601f19603f8301168101818110868211171562000535576200053562000482565b6040529283528183019350848101820192898411156200055457600080fd5b948201945b838610156200057d576200056d8662000498565b8552948201949382019362000559565b96506200058e905087820162000498565b9450505050509250929050565b600181811c90821680620005b057607f821691505b602082108103620005d157634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200035857600081815260208120601f850160051c81016020861015620006005750805b601f850160051c820191505b8181101562000621578281556001016200060c565b505050505050565b81516001600160401b0381111562000645576200064562000482565b6200065d816200065684546200059b565b84620005d7565b602080601f8311600181146200069557600084156200067c5750858301515b600019600386901b1c1916600185901b17855562000621565b600085815260208120601f198616915b82811015620006c657888601518255948401946001909101908401620006a5565b5085821015620006e55787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b600060018201620007205762000720620006f5565b5060010190565b634e487b7160e01b600052603260045260246000fd5b60008219821115620007535762000753620006f5565b500190565b61581f80620007686000396000f3fe6080604052600436106200020b5760003560e01c806370a082311162000117578063bd7b09e411620000a1578063e985e9c5116200006c578063e985e9c5146200064d578063f3caad03146200069a578063f64e30b014620006d7578063f979544314620006fc57600080fd5b8063bd7b09e414620005b7578063c5cc338814620005cf578063c87b56dd1462000603578063d547741f146200062857600080fd5b8063a217fddf11620000e2578063a217fddf146200053e578063a22cb4651462000555578063b73cdd19146200057a578063b88d4fde146200059257600080fd5b806370a0823114620004c45780638978eb1014620004e957806391d14854146200050157806395d89b41146200052657600080fd5b806323b872dd11620001995780632f2ff15d11620001645780632f2ff15d146200043057806336568abe146200045557806342842e0e146200047a5780636352211e146200049f57600080fd5b806323b872dd146200038c578063248a9ca314620003b1578063273b614914620003e5578063274a827b146200040b57600080fd5b8063095ea7b311620001da578063095ea7b314620002d65780630e211cc214620002fb57806316f5f71b146200032257806320c5429b146200036757600080fd5b806301ffc9a7146200021057806304b444d9146200024a57806306fdde031462000271578063081812fc1462000298575b600080fd5b3480156200021d57600080fd5b50620002356200022f3660046200250f565b62000721565b60405190151581526020015b60405180910390f35b3480156200025757600080fd5b506200026f6200026936600462002592565b62000734565b005b3480156200027e57600080fd5b5062000289620007de565b60405162000241919062002647565b348015620002a557600080fd5b50620002bd620002b73660046200265c565b62000878565b6040516001600160a01b03909116815260200162000241565b348015620002e357600080fd5b506200026f620002f536600462002676565b6200090f565b3480156200030857600080fd5b506200031362000a2f565b604051620002419190620026a3565b3480156200032f57600080fd5b50620003587f3c919ce539f5b48cdd3b70d26319a61596a5ff44fb77a82b76e90c9924bbe12f81565b60405190815260200162000241565b3480156200037457600080fd5b506200026f620003863660046200265c565b62000a95565b3480156200039957600080fd5b506200026f620003ab366004620026f2565b62000aa5565b348015620003be57600080fd5b5062000358620003d03660046200265c565b60009081526006602052604090206001015490565b620003fc620003f636600462002733565b62000aee565b60405162000241919062002887565b3480156200041857600080fd5b50620002896200042a366004620028ee565b62000b5f565b3480156200043d57600080fd5b506200026f6200044f36600462002933565b62000c17565b3480156200046257600080fd5b506200026f6200047436600462002933565b62000c40565b3480156200048757600080fd5b506200026f62000499366004620026f2565b62000cc2565b348015620004ac57600080fd5b50620002bd620004be3660046200265c565b62000cdf565b348015620004d157600080fd5b5062000358620004e336600462002733565b62000d58565b348015620004f657600080fd5b50620003fc62000de1565b3480156200050e57600080fd5b50620002356200052036600462002933565b6200131c565b3480156200053357600080fd5b506200028962001347565b3480156200054b57600080fd5b5062000358600081565b3480156200056257600080fd5b506200026f6200057436600462002971565b62001358565b3480156200058757600080fd5b506200031362001365565b3480156200059f57600080fd5b506200026f620005b136600462002a8e565b620013ca565b348015620005c457600080fd5b506200035860075481565b348015620005dc57600080fd5b50620005f4620005ee36600462002733565b6200144c565b60405162000241919062002b12565b3480156200061057600080fd5b5062000289620006223660046200265c565b620014c3565b3480156200063557600080fd5b506200026f6200064736600462002933565b620014d0565b3480156200065a57600080fd5b50620002356200066c36600462002b27565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b348015620006a757600080fd5b5062000235620006b936600462002733565b6001600160a01b031660009081526008602052604090205460ff1690565b348015620006e457600080fd5b5062000289620006f636600462002733565b620014f9565b3480156200070957600080fd5b506200026f6200071b36600462002b79565b620015ad565b60006200072e8262001641565b92915050565b6001600160a01b03831660009081526008602052604090205460ff1615620007965760405162461bcd60e51b815260206004820152601060248201526f22bc34b9ba34b7339021b4ba34bd32b760811b60448201526064015b60405180910390fd5b6007805460009182620007a98362002bf9565b909155506000818152600a60205260409020909150620007cb83858362002ca3565b50620007d8848262001669565b50505050565b606060008054620007ef9062002c15565b80601f01602080910402602001604051908101604052809291908181526020018280546200081d9062002c15565b80156200086e5780601f1062000842576101008083540402835291602001916200086e565b820191906000526020600020905b8154815290600101906020018083116200085057829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b0316620008f35760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016200078d565b506000908152600460205260409020546001600160a01b031690565b60006200091c8262000cdf565b9050806001600160a01b0316836001600160a01b0316036200098b5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016200078d565b336001600160a01b0382161480620009aa5750620009aa81336200066c565b62000a1e5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016200078d565b62000a2a8383620017b1565b505050565b6060600b6001018054806020026020016040519081016040528092919081815260200182805480156200086e57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162000a6d575050505050905090565b62000aa260075462001821565b50565b60405162461bcd60e51b815260206004820152601d60248201527f436974697a656e416c7068613a204b65657020796f757220536f756c2000000060448201526064016200078d565b62000b1360405180606001604052806060815260200160608152602001606081525090565b919050565b82602001515181101562000b3b578062000b328162002bf9565b91505062000b18565b50604080516060810182528351815260209384015193810193909352820152919050565b33600090815260096020526040902060609062000b7e83858362002ca3565b805462000b8b9062002c15565b80601f016020809104026020016040519081016040528092919081815260200182805462000bb99062002c15565b801562000c0a5780601f1062000bde5761010080835404028352916020019162000c0a565b820191906000526020600020905b81548152906001019060200180831162000bec57829003601f168201915b5050505050905092915050565b60008281526006602052604090206001015462000c3481620018c2565b62000a2a8383620018ce565b6001600160a01b038116331462000cb25760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016200078d565b62000cbe828262001958565b5050565b62000a2a83838360405180602001604052806000815250620013ca565b6000818152600260205260408120546001600160a01b0316806200072e5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016200078d565b60006001600160a01b03821662000dc55760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016200078d565b506001600160a01b031660009081526003602052604090205490565b62000e0660405180606001604052806060815260200160608152602001606081525090565b90565b82602001515181101562000f7d5760008360200151828151811062000e325762000e3262002d70565b602002602001015190506000816001600160a01b031663c7f758a860016040518263ffffffff1660e01b815260040162000e6e91815260200190565b600060405180830381865afa15801562000e8c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000eb6919081019062002eeb565b8454600181810187556000878152602090819020845160079094020192835583015192935083929082019062000eed908262002f23565b506040820151600282019062000f04908262002f23565b506060820151600382019062000f1b908262002f23565b506080820151600482019062000f32908262002f23565b5060a0820151600582019062000f49908262002f23565b5060c091909101516006909101805460ff19169115159190911790555081905062000f748162002bf9565b91505062000e09565b506040518060600160405280836000015181526020018360200151815260200182805480602002602001604051908101604052809291908181526020016000905b828210156200131057838290600052602060002090600702016040518060e00160405290816000820154815260200160018201805462000ffe9062002c15565b80601f01602080910402602001604051908101604052809291908181526020018280546200102c9062002c15565b80156200107d5780601f1062001051576101008083540402835291602001916200107d565b820191906000526020600020905b8154815290600101906020018083116200105f57829003601f168201915b50505050508152602001600282018054620010989062002c15565b80601f0160208091040260200160405190810160405280929190818152602001828054620010c69062002c15565b8015620011175780601f10620010eb5761010080835404028352916020019162001117565b820191906000526020600020905b815481529060010190602001808311620010f957829003601f168201915b50505050508152602001600382018054620011329062002c15565b80601f0160208091040260200160405190810160405280929190818152602001828054620011609062002c15565b8015620011b15780601f106200118557610100808354040283529160200191620011b1565b820191906000526020600020905b8154815290600101906020018083116200119357829003601f168201915b50505050508152602001600482018054620011cc9062002c15565b80601f0160208091040260200160405190810160405280929190818152602001828054620011fa9062002c15565b80156200124b5780601f106200121f576101008083540402835291602001916200124b565b820191906000526020600020905b8154815290600101906020018083116200122d57829003601f168201915b50505050508152602001600582018054620012669062002c15565b80601f0160208091040260200160405190810160405280929190818152602001828054620012949062002c15565b8015620012e55780601f10620012b957610100808354040283529160200191620012e5565b820191906000526020600020905b815481529060010190602001808311620012c757829003601f168201915b50505091835250506006919091015460ff161515602091820152908252600192909201910162000fbe565b50505091525092915050565b60009182526006602090815260408084206001600160a01b0393909316845291905290205460ff1690565b606060018054620007ef9062002c15565b62000cbe338383620019c2565b6060600b6000018054806020026020016040519081016040528092919081815260200182805480156200086e576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831162000a6d575050505050905090565b620013d6338362001a92565b6200143e5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6044820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b60648201526084016200078d565b620007d88484848462001b91565b60606000829050806001600160a01b03166362564c486040518163ffffffff1660e01b8152600401600060405180830381865afa15801562001492573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620014bc919081019062002fef565b9392505050565b60606200072e8262001bcb565b600082815260066020526040902060010154620014ed81620018c2565b62000a2a838362001958565b6001600160a01b0381166000908152600960205260409020805460609190620015229062002c15565b80601f0160208091040260200160405190810160405280929190818152602001828054620015509062002c15565b8015620015a15780601f106200157557610100808354040283529160200191620015a1565b820191906000526020600020905b8154815290600101906020018083116200158357829003601f168201915b50505050509050919050565b6000828230604051620015c090620024ea565b620015ce93929190620030bf565b604051809103906000f080158015620015eb573d6000803e3d6000fd5b50600c80546001810182556000919091527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c70180546001600160a01b0319166001600160a01b0392909216919091179055505050565b60006001600160e01b03198216637965db0b60e01b14806200072e57506200072e8262001d29565b6001600160a01b038216620016c15760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016200078d565b6000818152600260205260409020546001600160a01b031615620017285760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016200078d565b6001600160a01b03821660009081526003602052604081208054600192906200175390849062003101565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190620017e88262000cdf565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006200182e8262000cdf565b90506200183d600083620017b1565b6001600160a01b0381166000908152600360205260408120805460019290620018689084906200311c565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b62000aa2813362001d7c565b620018da82826200131c565b62000cbe5760008281526006602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620019143390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6200196482826200131c565b1562000cbe5760008281526006602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b816001600160a01b0316836001600160a01b03160362001a255760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016200078d565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6000818152600260205260408120546001600160a01b031662001b0d5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016200078d565b600062001b1a8362000cdf565b9050806001600160a01b0316846001600160a01b0316148062001b6257506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b8062001b895750836001600160a01b031662001b7e8462000878565b6001600160a01b0316145b949350505050565b62001b9e84848462001deb565b62001bac8484848462001f93565b620007d85760405162461bcd60e51b81526004016200078d9062003136565b6060600062001bda83620020a1565b60405160200162001bec919062003188565b60408051601f198184030181528282018252600783526621b4ba34bd32b760c91b602084810191909152825180820184526000808252888152600a9092529281208054929550909162001c3f9062002c15565b80601f016020809104026020016040519081016040528092919081815260200182805462001c6d9062002c15565b801562001cbe5780601f1062001c925761010080835404028352916020019162001cbe565b820191906000526020600020905b81548152906001019060200180831162001ca057829003601f168201915b50505050509050600030905062001cfc8483878660405160200162001ce79493929190620031bb565b604051602081830303815290604052620021b9565b60405160200162001d0e9190620032ad565b60405160208183030381529060405295505050505050919050565b60006001600160e01b031982166380ac58cd60e01b148062001d5b57506001600160e01b03198216635b5e139f60e01b145b806200072e57506301ffc9a760e01b6001600160e01b03198316146200072e565b62001d8882826200131c565b62000cbe5762001da3816001600160a01b0316601462002331565b62001db083602062002331565b60405160200162001dc3929190620032f4565b60408051601f198184030181529082905262461bcd60e51b82526200078d9160040162002647565b826001600160a01b031662001e008262000cdf565b6001600160a01b03161462001e665760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b60648201526084016200078d565b6001600160a01b03821662001eca5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016200078d565b62001ed7600082620017b1565b6001600160a01b038316600090815260036020526040812080546001929062001f029084906200311c565b90915550506001600160a01b038216600090815260036020526040812080546001929062001f3290849062003101565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60006001600160a01b0384163b156200209657604051630a85bd0160e11b81526001600160a01b0385169063150b7a029062001fda9033908990889088906004016200336d565b6020604051808303816000875af192505050801562002018575060408051601f3d908101601f191682019092526200201591810190620033ac565b60015b6200207b573d80801562002049576040519150601f19603f3d011682016040523d82523d6000602084013e6200204e565b606091505b508051600003620020735760405162461bcd60e51b81526004016200078d9062003136565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905062001b89565b506001949350505050565b606081600003620020c95750506040805180820190915260018152600360fc1b602082015290565b8160005b8115620020f95780620020e08162002bf9565b9150620020f19050600a83620033e2565b9150620020cd565b6000816001600160401b03811115620021165762002116620029ad565b6040519080825280601f01601f19166020018201604052801562002141576020820181803683370190505b5090505b841562001b8957620021596001836200311c565b915062002168600a86620033f9565b6200217590603062003101565b60f81b8183815181106200218d576200218d62002d70565b60200101906001600160f81b031916908160001a905350620021b1600a86620033e2565b945062002145565b60608151600003620021d957505060408051602081019091526000815290565b6000604051806060016040528060408152602001620057aa60409139905060006003845160026200220b919062003101565b620022179190620033e2565b6200222490600462003410565b905060006200223582602062003101565b6001600160401b038111156200224f576200224f620029ad565b6040519080825280601f01601f1916602001820160405280156200227a576020820181803683370190505b509050818152600183018586518101602084015b81831015620022e8576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f81168501518253506001016200228e565b600389510660018114620023055760028114620023175762002323565b613d3d60f01b60011983015262002323565b603d60f81b6000198301525b509398975050505050505050565b606060006200234283600262003410565b6200234f90600262003101565b6001600160401b03811115620023695762002369620029ad565b6040519080825280601f01601f19166020018201604052801562002394576020820181803683370190505b509050600360fc1b81600081518110620023b257620023b262002d70565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110620023e457620023e462002d70565b60200101906001600160f81b031916908160001a90535060006200240a84600262003410565b6200241790600162003101565b90505b600181111562002499576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106200244f576200244f62002d70565b1a60f81b82828151811062002468576200246862002d70565b60200101906001600160f81b031916908160001a90535060049490941c93620024918162003432565b90506200241a565b508315620014bc5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016200078d565b61235d806200344d83390190565b6001600160e01b03198116811462000aa257600080fd5b6000602082840312156200252257600080fd5b8135620014bc81620024f8565b80356001600160a01b038116811462000b1357600080fd5b60008083601f8401126200255a57600080fd5b5081356001600160401b038111156200257257600080fd5b6020830191508360208285010111156200258b57600080fd5b9250929050565b600080600060408486031215620025a857600080fd5b620025b3846200252f565b925060208401356001600160401b03811115620025cf57600080fd5b620025dd8682870162002547565b9497909650939450505050565b60005b8381101562002607578181015183820152602001620025ed565b83811115620007d85750506000910152565b6000815180845262002633816020860160208601620025ea565b601f01601f19169290920160200192915050565b602081526000620014bc602083018462002619565b6000602082840312156200266f57600080fd5b5035919050565b600080604083850312156200268a57600080fd5b62002695836200252f565b946020939093013593505050565b6020808252825182820181905260009190848201906040850190845b81811015620026e65783516001600160a01b031683529284019291840191600101620026bf565b50909695505050505050565b6000806000606084860312156200270857600080fd5b62002713846200252f565b925062002723602085016200252f565b9150604084013590509250925092565b6000602082840312156200274657600080fd5b620014bc826200252f565b600081518084526020808501945080840160005b838110156200278c5781516001600160a01b03168752958201959082019060010162002765565b509495945050505050565b600081518084526020808501808196508360051b8101915082860160005b858110156200287a578284038952815160e081518652868201518188880152620027e28288018262002619565b91505060408083015187830382890152620027fe838262002619565b92505050606080830151878303828901526200281b838262002619565b925050506080808301518783038289015262002838838262002619565b9250505060a0808301518783038289015262002855838262002619565b60c09485015115159890940197909752505098850198935090840190600101620027b5565b5091979650505050505050565b602081526000825160606020840152620028a5608084018262002751565b90506020840151601f1980858403016040860152620028c5838362002751565b9250604086015191508085840301606086015250620028e5828262002797565b95945050505050565b600080602083850312156200290257600080fd5b82356001600160401b038111156200291957600080fd5b620029278582860162002547565b90969095509350505050565b600080604083850312156200294757600080fd5b8235915062002959602084016200252f565b90509250929050565b801515811462000aa257600080fd5b600080604083850312156200298557600080fd5b62002990836200252f565b91506020830135620029a28162002962565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60405160e081016001600160401b0381118282101715620029e857620029e8620029ad565b60405290565b604051601f8201601f191681016001600160401b038111828210171562002a195762002a19620029ad565b604052919050565b60006001600160401b0382111562002a3d5762002a3d620029ad565b50601f01601f191660200190565b600062002a6262002a5c8462002a21565b620029ee565b905082815283838301111562002a7757600080fd5b828260208301376000602084830101529392505050565b6000806000806080858703121562002aa557600080fd5b62002ab0856200252f565b935062002ac0602086016200252f565b92506040850135915060608501356001600160401b0381111562002ae357600080fd5b8501601f8101871362002af557600080fd5b62002b068782356020840162002a4b565b91505092959194509250565b602081526000620014bc602083018462002797565b6000806040838503121562002b3b57600080fd5b62002b46836200252f565b915062002959602084016200252f565b600082601f83011262002b6857600080fd5b620014bc8383356020850162002a4b565b6000806040838503121562002b8d57600080fd5b82356001600160401b038082111562002ba557600080fd5b62002bb38683870162002b56565b9350602085013591508082111562002bca57600080fd5b5062002bd98582860162002b56565b9150509250929050565b634e487b7160e01b600052601160045260246000fd5b60006001820162002c0e5762002c0e62002be3565b5060010190565b600181811c9082168062002c2a57607f821691505b60208210810362002c4b57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111562000a2a57600081815260208120601f850160051c8101602086101562002c7a5750805b601f850160051c820191505b8181101562002c9b5782815560010162002c86565b505050505050565b6001600160401b0383111562002cbd5762002cbd620029ad565b62002cd58362002cce835462002c15565b8362002c51565b6000601f84116001811462002d0c576000851562002cf35750838201355b600019600387901b1c1916600186901b17835562002d69565b600083815260209020601f19861690835b8281101562002d3f578685013582556020948501946001909201910162002d1d565b508682101562002d5d5760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b634e487b7160e01b600052603260045260246000fd5b600082601f83011262002d9857600080fd5b815162002da962002a5c8262002a21565b81815284602083860101111562002dbf57600080fd5b62001b89826020830160208701620025ea565b805162000b138162002962565b600060e0828403121562002df257600080fd5b62002dfc620029c3565b90508151815260208201516001600160401b038082111562002e1d57600080fd5b62002e2b8583860162002d86565b6020840152604084015191508082111562002e4557600080fd5b62002e538583860162002d86565b6040840152606084015191508082111562002e6d57600080fd5b62002e7b8583860162002d86565b6060840152608084015191508082111562002e9557600080fd5b62002ea38583860162002d86565b608084015260a084015191508082111562002ebd57600080fd5b5062002ecc8482850162002d86565b60a08301525062002ee060c0830162002dd2565b60c082015292915050565b60006020828403121562002efe57600080fd5b81516001600160401b0381111562002f1557600080fd5b62001b898482850162002ddf565b81516001600160401b0381111562002f3f5762002f3f620029ad565b62002f578162002f50845462002c15565b8462002c51565b602080601f83116001811462002f8f576000841562002f765750858301515b600019600386901b1c1916600185901b17855562002c9b565b600085815260208120601f198616915b8281101562002fc05788860151825594840194600190910190840162002f9f565b508582101562002fdf5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208083850312156200300357600080fd5b82516001600160401b03808211156200301b57600080fd5b818501915085601f8301126200303057600080fd5b815181811115620030455762003045620029ad565b8060051b62003056858201620029ee565b91825283810185019185810190898411156200307157600080fd5b86860192505b83831015620030b257825185811115620030915760008081fd5b620030a18b89838a010162002ddf565b835250918601919086019062003077565b9998505050505050505050565b606081526000620030d4606083018662002619565b8281036020840152620030e8818662002619565b91505060018060a01b0383166040830152949350505050565b6000821982111562003117576200311762002be3565b500190565b60008282101562003131576200313162002be3565b500390565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b68436974697a656e202360b81b815260008251620031ae816009850160208701620025ea565b9190910160090192915050565b683d913730b6b2911d1160b91b81528451600090620031e2816009850160208a01620025ea565b601d60f91b60099184019182015285516200320581600a840160208a01620025ea565b71111610113232b9b1b934b83a34b7b7111d1160711b600a929091019182015284516200323a81601c840160208901620025ea565b6c1116101134b6b0b3b2911d101160991b601c92909101918201527f646174613a696d6167652f7376672b786d6c3b6261736536342c0000000000006029820152835162003290816043840160208801620025ea565b61227d60f01b604392909101918201526045019695505050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815260008251620032e781601d850160208701620025ea565b91909101601d0192915050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516200332e816017850160208801620025ea565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835162003361816028840160208801620025ea565b01602801949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090620033a29083018462002619565b9695505050505050565b600060208284031215620033bf57600080fd5b8151620014bc81620024f8565b634e487b7160e01b600052601260045260246000fd5b600082620033f457620033f4620033cc565b500490565b6000826200340b576200340b620033cc565b500690565b60008160001904831182151516156200342d576200342d62002be3565b500290565b60008162003444576200344462002be3565b50600019019056fe60806040523480156200001157600080fd5b506040516200235d3803806200235d833981016040819052620000349162000132565b828282828260006200004783826200024e565b5060016200005682826200024e565b5050505050505050506200031a565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200008d57600080fd5b81516001600160401b0380821115620000aa57620000aa62000065565b604051601f8301601f19908116603f01168101908282118183101715620000d557620000d562000065565b81604052838152602092508683858801011115620000f257600080fd5b600091505b83821015620001165785820183015181830184015290820190620000f7565b83821115620001285760008385830101525b9695505050505050565b6000806000606084860312156200014857600080fd5b83516001600160401b03808211156200016057600080fd5b6200016e878388016200007b565b945060208601519150808211156200018557600080fd5b5062000194868287016200007b565b604086015190935090506001600160a01b0381168114620001b457600080fd5b809150509250925092565b600181811c90821680620001d457607f821691505b602082108103620001f557634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200024957600081815260208120601f850160051c81016020861015620002245750805b601f850160051c820191505b81811015620002455782815560010162000230565b5050505b505050565b81516001600160401b038111156200026a576200026a62000065565b62000282816200027b8454620001bf565b84620001fb565b602080601f831160018114620002ba5760008415620002a15750858301515b600019600386901b1c1916600185901b17855562000245565b600085815260208120601f198616915b82811015620002eb57888601518255948401946001909101908401620002ca565b50858210156200030a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b612033806200032a6000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c806370a08231116100b8578063bd7b09e41161007c578063bd7b09e41461028f578063c7f758a814610298578063c87b56dd146102b8578063e985e9c5146102cb578063f3caad0314610307578063f64e30b01461033357600080fd5b806370a082311461022d57806371e928af1461024e57806395d89b4114610261578063a22cb46514610269578063b88d4fde1461027c57600080fd5b806323b872dd116100ff57806323b872dd146101cc578063274a827b146101df57806342842e0e146101f257806362564c48146102055780636352211e1461021a57600080fd5b806301ffc9a71461013c57806306fdde0314610164578063081812fc14610179578063095ea7b3146101a457806320c5429b146101b9575b600080fd5b61014f61014a366004611902565b610346565b60405190151581526020015b60405180910390f35b61016c610398565b60405161015b9190611977565b61018c61018736600461198a565b61042a565b6040516001600160a01b03909116815260200161015b565b6101b76101b23660046119bf565b6104c4565b005b6101b76101c736600461198a565b6105d9565b6101b76101da3660046119e9565b6105e7565b61016c6101ed366004611a25565b61062f565b6101b76102003660046119e9565b6106dd565b61020d6106f8565b60405161015b9190611b36565b61018c61022836600461198a565b610a4d565b61024061023b366004611b98565b610ac4565b60405190815260200161015b565b6101b761025c366004611b98565b610b4b565b61016c610b6b565b6101b7610277366004611bb3565b610b7a565b6101b761028a366004611c05565b610b89565b61024060065481565b6102ab6102a636600461198a565b610c0b565b60405161015b9190611ce1565b61016c6102c636600461198a565b610f77565b61014f6102d9366004611cf4565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b61014f610315366004611b98565b6001600160a01b031660009081526007602052604090205460ff1690565b61016c610341366004611b98565b61105f565b60006001600160e01b031982166380ac58cd60e01b148061037757506001600160e01b03198216635b5e139f60e01b145b8061039257506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600080546103a790611d27565b80601f01602080910402602001604051908101604052809291908181526020018280546103d390611d27565b80156104205780601f106103f557610100808354040283529160200191610420565b820191906000526020600020905b81548152906001019060200180831161040357829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166104a85760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b60006104cf82610a4d565b9050806001600160a01b0316836001600160a01b03160361053c5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b606482015260840161049f565b336001600160a01b0382161480610558575061055881336102d9565b6105ca5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606482015260840161049f565b6105d4838361110b565b505050565b6105e4600654611179565b50565b60405162461bcd60e51b815260206004820152601d60248201527f436974697a656e416c7068613a204b65657020796f757220536f756c20000000604482015260640161049f565b33600090815260086020526040902060609061064c838583611daf565b805461065790611d27565b80601f016020809104026020016040519081016040528092919081815260200182805461068390611d27565b80156106d05780601f106106a5576101008083540402835291602001916106d0565b820191906000526020600020905b8154815290600101906020018083116106b357829003601f168201915b5050505050905092915050565b6105d483838360405180602001604052806000815250610b89565b60606009805480602002602001604051908101604052809291908181526020016000905b82821015610a4457838290600052602060002090600702016040518060e00160405290816000820154815260200160018201805461075990611d27565b80601f016020809104026020016040519081016040528092919081815260200182805461078590611d27565b80156107d25780601f106107a7576101008083540402835291602001916107d2565b820191906000526020600020905b8154815290600101906020018083116107b557829003601f168201915b505050505081526020016002820180546107eb90611d27565b80601f016020809104026020016040519081016040528092919081815260200182805461081790611d27565b80156108645780601f1061083957610100808354040283529160200191610864565b820191906000526020600020905b81548152906001019060200180831161084757829003601f168201915b5050505050815260200160038201805461087d90611d27565b80601f01602080910402602001604051908101604052809291908181526020018280546108a990611d27565b80156108f65780601f106108cb576101008083540402835291602001916108f6565b820191906000526020600020905b8154815290600101906020018083116108d957829003601f168201915b5050505050815260200160048201805461090f90611d27565b80601f016020809104026020016040519081016040528092919081815260200182805461093b90611d27565b80156109885780601f1061095d57610100808354040283529160200191610988565b820191906000526020600020905b81548152906001019060200180831161096b57829003601f168201915b505050505081526020016005820180546109a190611d27565b80601f01602080910402602001604051908101604052809291908181526020018280546109cd90611d27565b8015610a1a5780601f106109ef57610100808354040283529160200191610a1a565b820191906000526020600020905b8154815290600101906020018083116109fd57829003601f168201915b50505091835250506006919091015460ff161515602091820152908252600192909201910161071c565b50505050905090565b6000818152600260205260408120546001600160a01b0316806103925760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b606482015260840161049f565b60006001600160a01b038216610b2f5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b606482015260840161049f565b506001600160a01b031660009081526003602052604090205490565b6001600160a01b03811660005260076020526006546105e4908290611214565b6060600180546103a790611d27565b610b85338383611356565b5050565b610b933383611424565b610bf95760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6044820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606482015260840161049f565b610c058484848461151b565b50505050565b610c506040518060e001604052806000801916815260200160608152602001606081526020016060815260200160608152602001606081526020016000151581525090565b60098281548110610c6357610c63611e70565b90600052602060002090600702016040518060e001604052908160008201548152602001600182018054610c9690611d27565b80601f0160208091040260200160405190810160405280929190818152602001828054610cc290611d27565b8015610d0f5780601f10610ce457610100808354040283529160200191610d0f565b820191906000526020600020905b815481529060010190602001808311610cf257829003601f168201915b50505050508152602001600282018054610d2890611d27565b80601f0160208091040260200160405190810160405280929190818152602001828054610d5490611d27565b8015610da15780601f10610d7657610100808354040283529160200191610da1565b820191906000526020600020905b815481529060010190602001808311610d8457829003601f168201915b50505050508152602001600382018054610dba90611d27565b80601f0160208091040260200160405190810160405280929190818152602001828054610de690611d27565b8015610e335780601f10610e0857610100808354040283529160200191610e33565b820191906000526020600020905b815481529060010190602001808311610e1657829003601f168201915b50505050508152602001600482018054610e4c90611d27565b80601f0160208091040260200160405190810160405280929190818152602001828054610e7890611d27565b8015610ec55780601f10610e9a57610100808354040283529160200191610ec5565b820191906000526020600020905b815481529060010190602001808311610ea857829003601f168201915b50505050508152602001600582018054610ede90611d27565b80601f0160208091040260200160405190810160405280929190818152602001828054610f0a90611d27565b8015610f575780601f10610f2c57610100808354040283529160200191610f57565b820191906000526020600020905b815481529060010190602001808311610f3a57829003601f168201915b50505091835250506006919091015460ff16151560209091015292915050565b6000818152600260205260409020546060906001600160a01b0316610ff65760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b606482015260840161049f565b600061100d60408051602081019091526000815290565b9050600081511161102d5760405180602001604052806000815250611058565b806110378461154e565b604051602001611048929190611e86565b6040516020818303038152906040525b9392505050565b6001600160a01b038116600090815260086020526040902080546060919061108690611d27565b80601f01602080910402602001604051908101604052809291908181526020018280546110b290611d27565b80156110ff5780601f106110d4576101008083540402835291602001916110ff565b820191906000526020600020905b8154815290600101906020018083116110e257829003601f168201915b50505050509050919050565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061114082610a4d565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600061118482610a4d565b905061119160008361110b565b6001600160a01b03811660009081526003602052604081208054600192906111ba908490611ecb565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6001600160a01b03821661126a5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161049f565b6000818152600260205260409020546001600160a01b0316156112cf5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161049f565b6001600160a01b03821660009081526003602052604081208054600192906112f8908490611ee2565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b816001600160a01b0316836001600160a01b0316036113b75760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161049f565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6000818152600260205260408120546001600160a01b031661149d5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b606482015260840161049f565b60006114a883610a4d565b9050806001600160a01b0316846001600160a01b031614806114ef57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806115135750836001600160a01b03166115088461042a565b6001600160a01b0316145b949350505050565b61152684848461164f565b611532848484846117eb565b610c055760405162461bcd60e51b815260040161049f90611efa565b6060816000036115755750506040805180820190915260018152600360fc1b602082015290565b8160005b811561159f578061158981611f4c565b91506115989050600a83611f7b565b9150611579565b60008167ffffffffffffffff8111156115ba576115ba611bef565b6040519080825280601f01601f1916602001820160405280156115e4576020820181803683370190505b5090505b8415611513576115f9600183611ecb565b9150611606600a86611f8f565b611611906030611ee2565b60f81b81838151811061162657611626611e70565b60200101906001600160f81b031916908160001a905350611648600a86611f7b565b94506115e8565b826001600160a01b031661166282610a4d565b6001600160a01b0316146116c65760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b606482015260840161049f565b6001600160a01b0382166117285760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161049f565b61173360008261110b565b6001600160a01b038316600090815260036020526040812080546001929061175c908490611ecb565b90915550506001600160a01b038216600090815260036020526040812080546001929061178a908490611ee2565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60006001600160a01b0384163b156118e157604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061182f903390899088908890600401611fa3565b6020604051808303816000875af192505050801561186a575060408051601f3d908101601f1916820190925261186791810190611fe0565b60015b6118c7573d808015611898576040519150601f19603f3d011682016040523d82523d6000602084013e61189d565b606091505b5080516000036118bf5760405162461bcd60e51b815260040161049f90611efa565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611513565b506001949350505050565b6001600160e01b0319811681146105e457600080fd5b60006020828403121561191457600080fd5b8135611058816118ec565b60005b8381101561193a578181015183820152602001611922565b83811115610c055750506000910152565b6000815180845261196381602086016020860161191f565b601f01601f19169290920160200192915050565b602081526000611058602083018461194b565b60006020828403121561199c57600080fd5b5035919050565b80356001600160a01b03811681146119ba57600080fd5b919050565b600080604083850312156119d257600080fd5b6119db836119a3565b946020939093013593505050565b6000806000606084860312156119fe57600080fd5b611a07846119a3565b9250611a15602085016119a3565b9150604084013590509250925092565b60008060208385031215611a3857600080fd5b823567ffffffffffffffff80821115611a5057600080fd5b818501915085601f830112611a6457600080fd5b813581811115611a7357600080fd5b866020828501011115611a8557600080fd5b60209290920196919550909350505050565b805182526000602082015160e06020850152611ab660e085018261194b565b905060408301518482036040860152611acf828261194b565b91505060608301518482036060860152611ae9828261194b565b91505060808301518482036080860152611b03828261194b565b91505060a083015184820360a0860152611b1d828261194b565b91505060c0830151151560c08501528091505092915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015611b8b57603f19888603018452611b79858351611a97565b94509285019290850190600101611b5d565b5092979650505050505050565b600060208284031215611baa57600080fd5b611058826119a3565b60008060408385031215611bc657600080fd5b611bcf836119a3565b915060208301358015158114611be457600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215611c1b57600080fd5b611c24856119a3565b9350611c32602086016119a3565b925060408501359150606085013567ffffffffffffffff80821115611c5657600080fd5b818701915087601f830112611c6a57600080fd5b813581811115611c7c57611c7c611bef565b604051601f8201601f19908116603f01168101908382118183101715611ca457611ca4611bef565b816040528281528a6020848701011115611cbd57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6020815260006110586020830184611a97565b60008060408385031215611d0757600080fd5b611d10836119a3565b9150611d1e602084016119a3565b90509250929050565b600181811c90821680611d3b57607f821691505b602082108103611d5b57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156105d457600081815260208120601f850160051c81016020861015611d885750805b601f850160051c820191505b81811015611da757828155600101611d94565b505050505050565b67ffffffffffffffff831115611dc757611dc7611bef565b611ddb83611dd58354611d27565b83611d61565b6000601f841160018114611e0f5760008515611df75750838201355b600019600387901b1c1916600186901b178355611e69565b600083815260209020601f19861690835b82811015611e405786850135825560209485019460019092019101611e20565b5086821015611e5d5760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b634e487b7160e01b600052603260045260246000fd5b60008351611e9881846020880161191f565b835190830190611eac81836020880161191f565b01949350505050565b634e487b7160e01b600052601160045260246000fd5b600082821015611edd57611edd611eb5565b500390565b60008219821115611ef557611ef5611eb5565b500190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b600060018201611f5e57611f5e611eb5565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600082611f8a57611f8a611f65565b500490565b600082611f9e57611f9e611f65565b500690565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611fd69083018461194b565b9695505050505050565b600060208284031215611ff257600080fd5b8151611058816118ec56fea26469706673582212204c76f3680ff61bcb039a2ba22c1300c74ff3a5492e2996b075570c20602be43d64736f6c634300080f00334142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220e3d1e334700fcfb85d1fd39d9c9f87436e34a2f057623660f75d5132a6991d9764736f6c634300080f0033",
  "deployedBytecode": "0x6080604052600436106200020b5760003560e01c806370a082311162000117578063bd7b09e411620000a1578063e985e9c5116200006c578063e985e9c5146200064d578063f3caad03146200069a578063f64e30b014620006d7578063f979544314620006fc57600080fd5b8063bd7b09e414620005b7578063c5cc338814620005cf578063c87b56dd1462000603578063d547741f146200062857600080fd5b8063a217fddf11620000e2578063a217fddf146200053e578063a22cb4651462000555578063b73cdd19146200057a578063b88d4fde146200059257600080fd5b806370a0823114620004c45780638978eb1014620004e957806391d14854146200050157806395d89b41146200052657600080fd5b806323b872dd11620001995780632f2ff15d11620001645780632f2ff15d146200043057806336568abe146200045557806342842e0e146200047a5780636352211e146200049f57600080fd5b806323b872dd146200038c578063248a9ca314620003b1578063273b614914620003e5578063274a827b146200040b57600080fd5b8063095ea7b311620001da578063095ea7b314620002d65780630e211cc214620002fb57806316f5f71b146200032257806320c5429b146200036757600080fd5b806301ffc9a7146200021057806304b444d9146200024a57806306fdde031462000271578063081812fc1462000298575b600080fd5b3480156200021d57600080fd5b50620002356200022f3660046200250f565b62000721565b60405190151581526020015b60405180910390f35b3480156200025757600080fd5b506200026f6200026936600462002592565b62000734565b005b3480156200027e57600080fd5b5062000289620007de565b60405162000241919062002647565b348015620002a557600080fd5b50620002bd620002b73660046200265c565b62000878565b6040516001600160a01b03909116815260200162000241565b348015620002e357600080fd5b506200026f620002f536600462002676565b6200090f565b3480156200030857600080fd5b506200031362000a2f565b604051620002419190620026a3565b3480156200032f57600080fd5b50620003587f3c919ce539f5b48cdd3b70d26319a61596a5ff44fb77a82b76e90c9924bbe12f81565b60405190815260200162000241565b3480156200037457600080fd5b506200026f620003863660046200265c565b62000a95565b3480156200039957600080fd5b506200026f620003ab366004620026f2565b62000aa5565b348015620003be57600080fd5b5062000358620003d03660046200265c565b60009081526006602052604090206001015490565b620003fc620003f636600462002733565b62000aee565b60405162000241919062002887565b3480156200041857600080fd5b50620002896200042a366004620028ee565b62000b5f565b3480156200043d57600080fd5b506200026f6200044f36600462002933565b62000c17565b3480156200046257600080fd5b506200026f6200047436600462002933565b62000c40565b3480156200048757600080fd5b506200026f62000499366004620026f2565b62000cc2565b348015620004ac57600080fd5b50620002bd620004be3660046200265c565b62000cdf565b348015620004d157600080fd5b5062000358620004e336600462002733565b62000d58565b348015620004f657600080fd5b50620003fc62000de1565b3480156200050e57600080fd5b50620002356200052036600462002933565b6200131c565b3480156200053357600080fd5b506200028962001347565b3480156200054b57600080fd5b5062000358600081565b3480156200056257600080fd5b506200026f6200057436600462002971565b62001358565b3480156200058757600080fd5b506200031362001365565b3480156200059f57600080fd5b506200026f620005b136600462002a8e565b620013ca565b348015620005c457600080fd5b506200035860075481565b348015620005dc57600080fd5b50620005f4620005ee36600462002733565b6200144c565b60405162000241919062002b12565b3480156200061057600080fd5b5062000289620006223660046200265c565b620014c3565b3480156200063557600080fd5b506200026f6200064736600462002933565b620014d0565b3480156200065a57600080fd5b50620002356200066c36600462002b27565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b348015620006a757600080fd5b5062000235620006b936600462002733565b6001600160a01b031660009081526008602052604090205460ff1690565b348015620006e457600080fd5b5062000289620006f636600462002733565b620014f9565b3480156200070957600080fd5b506200026f6200071b36600462002b79565b620015ad565b60006200072e8262001641565b92915050565b6001600160a01b03831660009081526008602052604090205460ff1615620007965760405162461bcd60e51b815260206004820152601060248201526f22bc34b9ba34b7339021b4ba34bd32b760811b60448201526064015b60405180910390fd5b6007805460009182620007a98362002bf9565b909155506000818152600a60205260409020909150620007cb83858362002ca3565b50620007d8848262001669565b50505050565b606060008054620007ef9062002c15565b80601f01602080910402602001604051908101604052809291908181526020018280546200081d9062002c15565b80156200086e5780601f1062000842576101008083540402835291602001916200086e565b820191906000526020600020905b8154815290600101906020018083116200085057829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b0316620008f35760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016200078d565b506000908152600460205260409020546001600160a01b031690565b60006200091c8262000cdf565b9050806001600160a01b0316836001600160a01b0316036200098b5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016200078d565b336001600160a01b0382161480620009aa5750620009aa81336200066c565b62000a1e5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016200078d565b62000a2a8383620017b1565b505050565b6060600b6001018054806020026020016040519081016040528092919081815260200182805480156200086e57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162000a6d575050505050905090565b62000aa260075462001821565b50565b60405162461bcd60e51b815260206004820152601d60248201527f436974697a656e416c7068613a204b65657020796f757220536f756c2000000060448201526064016200078d565b62000b1360405180606001604052806060815260200160608152602001606081525090565b919050565b82602001515181101562000b3b578062000b328162002bf9565b91505062000b18565b50604080516060810182528351815260209384015193810193909352820152919050565b33600090815260096020526040902060609062000b7e83858362002ca3565b805462000b8b9062002c15565b80601f016020809104026020016040519081016040528092919081815260200182805462000bb99062002c15565b801562000c0a5780601f1062000bde5761010080835404028352916020019162000c0a565b820191906000526020600020905b81548152906001019060200180831162000bec57829003601f168201915b5050505050905092915050565b60008281526006602052604090206001015462000c3481620018c2565b62000a2a8383620018ce565b6001600160a01b038116331462000cb25760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016200078d565b62000cbe828262001958565b5050565b62000a2a83838360405180602001604052806000815250620013ca565b6000818152600260205260408120546001600160a01b0316806200072e5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016200078d565b60006001600160a01b03821662000dc55760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016200078d565b506001600160a01b031660009081526003602052604090205490565b62000e0660405180606001604052806060815260200160608152602001606081525090565b90565b82602001515181101562000f7d5760008360200151828151811062000e325762000e3262002d70565b602002602001015190506000816001600160a01b031663c7f758a860016040518263ffffffff1660e01b815260040162000e6e91815260200190565b600060405180830381865afa15801562000e8c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000eb6919081019062002eeb565b8454600181810187556000878152602090819020845160079094020192835583015192935083929082019062000eed908262002f23565b506040820151600282019062000f04908262002f23565b506060820151600382019062000f1b908262002f23565b506080820151600482019062000f32908262002f23565b5060a0820151600582019062000f49908262002f23565b5060c091909101516006909101805460ff19169115159190911790555081905062000f748162002bf9565b91505062000e09565b506040518060600160405280836000015181526020018360200151815260200182805480602002602001604051908101604052809291908181526020016000905b828210156200131057838290600052602060002090600702016040518060e00160405290816000820154815260200160018201805462000ffe9062002c15565b80601f01602080910402602001604051908101604052809291908181526020018280546200102c9062002c15565b80156200107d5780601f1062001051576101008083540402835291602001916200107d565b820191906000526020600020905b8154815290600101906020018083116200105f57829003601f168201915b50505050508152602001600282018054620010989062002c15565b80601f0160208091040260200160405190810160405280929190818152602001828054620010c69062002c15565b8015620011175780601f10620010eb5761010080835404028352916020019162001117565b820191906000526020600020905b815481529060010190602001808311620010f957829003601f168201915b50505050508152602001600382018054620011329062002c15565b80601f0160208091040260200160405190810160405280929190818152602001828054620011609062002c15565b8015620011b15780601f106200118557610100808354040283529160200191620011b1565b820191906000526020600020905b8154815290600101906020018083116200119357829003601f168201915b50505050508152602001600482018054620011cc9062002c15565b80601f0160208091040260200160405190810160405280929190818152602001828054620011fa9062002c15565b80156200124b5780601f106200121f576101008083540402835291602001916200124b565b820191906000526020600020905b8154815290600101906020018083116200122d57829003601f168201915b50505050508152602001600582018054620012669062002c15565b80601f0160208091040260200160405190810160405280929190818152602001828054620012949062002c15565b8015620012e55780601f10620012b957610100808354040283529160200191620012e5565b820191906000526020600020905b815481529060010190602001808311620012c757829003601f168201915b50505091835250506006919091015460ff161515602091820152908252600192909201910162000fbe565b50505091525092915050565b60009182526006602090815260408084206001600160a01b0393909316845291905290205460ff1690565b606060018054620007ef9062002c15565b62000cbe338383620019c2565b6060600b6000018054806020026020016040519081016040528092919081815260200182805480156200086e576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831162000a6d575050505050905090565b620013d6338362001a92565b6200143e5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6044820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b60648201526084016200078d565b620007d88484848462001b91565b60606000829050806001600160a01b03166362564c486040518163ffffffff1660e01b8152600401600060405180830381865afa15801562001492573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620014bc919081019062002fef565b9392505050565b60606200072e8262001bcb565b600082815260066020526040902060010154620014ed81620018c2565b62000a2a838362001958565b6001600160a01b0381166000908152600960205260409020805460609190620015229062002c15565b80601f0160208091040260200160405190810160405280929190818152602001828054620015509062002c15565b8015620015a15780601f106200157557610100808354040283529160200191620015a1565b820191906000526020600020905b8154815290600101906020018083116200158357829003601f168201915b50505050509050919050565b6000828230604051620015c090620024ea565b620015ce93929190620030bf565b604051809103906000f080158015620015eb573d6000803e3d6000fd5b50600c80546001810182556000919091527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c70180546001600160a01b0319166001600160a01b0392909216919091179055505050565b60006001600160e01b03198216637965db0b60e01b14806200072e57506200072e8262001d29565b6001600160a01b038216620016c15760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016200078d565b6000818152600260205260409020546001600160a01b031615620017285760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016200078d565b6001600160a01b03821660009081526003602052604081208054600192906200175390849062003101565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190620017e88262000cdf565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006200182e8262000cdf565b90506200183d600083620017b1565b6001600160a01b0381166000908152600360205260408120805460019290620018689084906200311c565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b62000aa2813362001d7c565b620018da82826200131c565b62000cbe5760008281526006602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620019143390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6200196482826200131c565b1562000cbe5760008281526006602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b816001600160a01b0316836001600160a01b03160362001a255760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016200078d565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6000818152600260205260408120546001600160a01b031662001b0d5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016200078d565b600062001b1a8362000cdf565b9050806001600160a01b0316846001600160a01b0316148062001b6257506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b8062001b895750836001600160a01b031662001b7e8462000878565b6001600160a01b0316145b949350505050565b62001b9e84848462001deb565b62001bac8484848462001f93565b620007d85760405162461bcd60e51b81526004016200078d9062003136565b6060600062001bda83620020a1565b60405160200162001bec919062003188565b60408051601f198184030181528282018252600783526621b4ba34bd32b760c91b602084810191909152825180820184526000808252888152600a9092529281208054929550909162001c3f9062002c15565b80601f016020809104026020016040519081016040528092919081815260200182805462001c6d9062002c15565b801562001cbe5780601f1062001c925761010080835404028352916020019162001cbe565b820191906000526020600020905b81548152906001019060200180831162001ca057829003601f168201915b50505050509050600030905062001cfc8483878660405160200162001ce79493929190620031bb565b604051602081830303815290604052620021b9565b60405160200162001d0e9190620032ad565b60405160208183030381529060405295505050505050919050565b60006001600160e01b031982166380ac58cd60e01b148062001d5b57506001600160e01b03198216635b5e139f60e01b145b806200072e57506301ffc9a760e01b6001600160e01b03198316146200072e565b62001d8882826200131c565b62000cbe5762001da3816001600160a01b0316601462002331565b62001db083602062002331565b60405160200162001dc3929190620032f4565b60408051601f198184030181529082905262461bcd60e51b82526200078d9160040162002647565b826001600160a01b031662001e008262000cdf565b6001600160a01b03161462001e665760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b60648201526084016200078d565b6001600160a01b03821662001eca5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016200078d565b62001ed7600082620017b1565b6001600160a01b038316600090815260036020526040812080546001929062001f029084906200311c565b90915550506001600160a01b038216600090815260036020526040812080546001929062001f3290849062003101565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60006001600160a01b0384163b156200209657604051630a85bd0160e11b81526001600160a01b0385169063150b7a029062001fda9033908990889088906004016200336d565b6020604051808303816000875af192505050801562002018575060408051601f3d908101601f191682019092526200201591810190620033ac565b60015b6200207b573d80801562002049576040519150601f19603f3d011682016040523d82523d6000602084013e6200204e565b606091505b508051600003620020735760405162461bcd60e51b81526004016200078d9062003136565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905062001b89565b506001949350505050565b606081600003620020c95750506040805180820190915260018152600360fc1b602082015290565b8160005b8115620020f95780620020e08162002bf9565b9150620020f19050600a83620033e2565b9150620020cd565b6000816001600160401b03811115620021165762002116620029ad565b6040519080825280601f01601f19166020018201604052801562002141576020820181803683370190505b5090505b841562001b8957620021596001836200311c565b915062002168600a86620033f9565b6200217590603062003101565b60f81b8183815181106200218d576200218d62002d70565b60200101906001600160f81b031916908160001a905350620021b1600a86620033e2565b945062002145565b60608151600003620021d957505060408051602081019091526000815290565b6000604051806060016040528060408152602001620057aa60409139905060006003845160026200220b919062003101565b620022179190620033e2565b6200222490600462003410565b905060006200223582602062003101565b6001600160401b038111156200224f576200224f620029ad565b6040519080825280601f01601f1916602001820160405280156200227a576020820181803683370190505b509050818152600183018586518101602084015b81831015620022e8576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f81168501518253506001016200228e565b600389510660018114620023055760028114620023175762002323565b613d3d60f01b60011983015262002323565b603d60f81b6000198301525b509398975050505050505050565b606060006200234283600262003410565b6200234f90600262003101565b6001600160401b03811115620023695762002369620029ad565b6040519080825280601f01601f19166020018201604052801562002394576020820181803683370190505b509050600360fc1b81600081518110620023b257620023b262002d70565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110620023e457620023e462002d70565b60200101906001600160f81b031916908160001a90535060006200240a84600262003410565b6200241790600162003101565b90505b600181111562002499576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106200244f576200244f62002d70565b1a60f81b82828151811062002468576200246862002d70565b60200101906001600160f81b031916908160001a90535060049490941c93620024918162003432565b90506200241a565b508315620014bc5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016200078d565b61235d806200344d83390190565b6001600160e01b03198116811462000aa257600080fd5b6000602082840312156200252257600080fd5b8135620014bc81620024f8565b80356001600160a01b038116811462000b1357600080fd5b60008083601f8401126200255a57600080fd5b5081356001600160401b038111156200257257600080fd5b6020830191508360208285010111156200258b57600080fd5b9250929050565b600080600060408486031215620025a857600080fd5b620025b3846200252f565b925060208401356001600160401b03811115620025cf57600080fd5b620025dd8682870162002547565b9497909650939450505050565b60005b8381101562002607578181015183820152602001620025ed565b83811115620007d85750506000910152565b6000815180845262002633816020860160208601620025ea565b601f01601f19169290920160200192915050565b602081526000620014bc602083018462002619565b6000602082840312156200266f57600080fd5b5035919050565b600080604083850312156200268a57600080fd5b62002695836200252f565b946020939093013593505050565b6020808252825182820181905260009190848201906040850190845b81811015620026e65783516001600160a01b031683529284019291840191600101620026bf565b50909695505050505050565b6000806000606084860312156200270857600080fd5b62002713846200252f565b925062002723602085016200252f565b9150604084013590509250925092565b6000602082840312156200274657600080fd5b620014bc826200252f565b600081518084526020808501945080840160005b838110156200278c5781516001600160a01b03168752958201959082019060010162002765565b509495945050505050565b600081518084526020808501808196508360051b8101915082860160005b858110156200287a578284038952815160e081518652868201518188880152620027e28288018262002619565b91505060408083015187830382890152620027fe838262002619565b92505050606080830151878303828901526200281b838262002619565b925050506080808301518783038289015262002838838262002619565b9250505060a0808301518783038289015262002855838262002619565b60c09485015115159890940197909752505098850198935090840190600101620027b5565b5091979650505050505050565b602081526000825160606020840152620028a5608084018262002751565b90506020840151601f1980858403016040860152620028c5838362002751565b9250604086015191508085840301606086015250620028e5828262002797565b95945050505050565b600080602083850312156200290257600080fd5b82356001600160401b038111156200291957600080fd5b620029278582860162002547565b90969095509350505050565b600080604083850312156200294757600080fd5b8235915062002959602084016200252f565b90509250929050565b801515811462000aa257600080fd5b600080604083850312156200298557600080fd5b62002990836200252f565b91506020830135620029a28162002962565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60405160e081016001600160401b0381118282101715620029e857620029e8620029ad565b60405290565b604051601f8201601f191681016001600160401b038111828210171562002a195762002a19620029ad565b604052919050565b60006001600160401b0382111562002a3d5762002a3d620029ad565b50601f01601f191660200190565b600062002a6262002a5c8462002a21565b620029ee565b905082815283838301111562002a7757600080fd5b828260208301376000602084830101529392505050565b6000806000806080858703121562002aa557600080fd5b62002ab0856200252f565b935062002ac0602086016200252f565b92506040850135915060608501356001600160401b0381111562002ae357600080fd5b8501601f8101871362002af557600080fd5b62002b068782356020840162002a4b565b91505092959194509250565b602081526000620014bc602083018462002797565b6000806040838503121562002b3b57600080fd5b62002b46836200252f565b915062002959602084016200252f565b600082601f83011262002b6857600080fd5b620014bc8383356020850162002a4b565b6000806040838503121562002b8d57600080fd5b82356001600160401b038082111562002ba557600080fd5b62002bb38683870162002b56565b9350602085013591508082111562002bca57600080fd5b5062002bd98582860162002b56565b9150509250929050565b634e487b7160e01b600052601160045260246000fd5b60006001820162002c0e5762002c0e62002be3565b5060010190565b600181811c9082168062002c2a57607f821691505b60208210810362002c4b57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111562000a2a57600081815260208120601f850160051c8101602086101562002c7a5750805b601f850160051c820191505b8181101562002c9b5782815560010162002c86565b505050505050565b6001600160401b0383111562002cbd5762002cbd620029ad565b62002cd58362002cce835462002c15565b8362002c51565b6000601f84116001811462002d0c576000851562002cf35750838201355b600019600387901b1c1916600186901b17835562002d69565b600083815260209020601f19861690835b8281101562002d3f578685013582556020948501946001909201910162002d1d565b508682101562002d5d5760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b634e487b7160e01b600052603260045260246000fd5b600082601f83011262002d9857600080fd5b815162002da962002a5c8262002a21565b81815284602083860101111562002dbf57600080fd5b62001b89826020830160208701620025ea565b805162000b138162002962565b600060e0828403121562002df257600080fd5b62002dfc620029c3565b90508151815260208201516001600160401b038082111562002e1d57600080fd5b62002e2b8583860162002d86565b6020840152604084015191508082111562002e4557600080fd5b62002e538583860162002d86565b6040840152606084015191508082111562002e6d57600080fd5b62002e7b8583860162002d86565b6060840152608084015191508082111562002e9557600080fd5b62002ea38583860162002d86565b608084015260a084015191508082111562002ebd57600080fd5b5062002ecc8482850162002d86565b60a08301525062002ee060c0830162002dd2565b60c082015292915050565b60006020828403121562002efe57600080fd5b81516001600160401b0381111562002f1557600080fd5b62001b898482850162002ddf565b81516001600160401b0381111562002f3f5762002f3f620029ad565b62002f578162002f50845462002c15565b8462002c51565b602080601f83116001811462002f8f576000841562002f765750858301515b600019600386901b1c1916600185901b17855562002c9b565b600085815260208120601f198616915b8281101562002fc05788860151825594840194600190910190840162002f9f565b508582101562002fdf5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208083850312156200300357600080fd5b82516001600160401b03808211156200301b57600080fd5b818501915085601f8301126200303057600080fd5b815181811115620030455762003045620029ad565b8060051b62003056858201620029ee565b91825283810185019185810190898411156200307157600080fd5b86860192505b83831015620030b257825185811115620030915760008081fd5b620030a18b89838a010162002ddf565b835250918601919086019062003077565b9998505050505050505050565b606081526000620030d4606083018662002619565b8281036020840152620030e8818662002619565b91505060018060a01b0383166040830152949350505050565b6000821982111562003117576200311762002be3565b500190565b60008282101562003131576200313162002be3565b500390565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b68436974697a656e202360b81b815260008251620031ae816009850160208701620025ea565b9190910160090192915050565b683d913730b6b2911d1160b91b81528451600090620031e2816009850160208a01620025ea565b601d60f91b60099184019182015285516200320581600a840160208a01620025ea565b71111610113232b9b1b934b83a34b7b7111d1160711b600a929091019182015284516200323a81601c840160208901620025ea565b6c1116101134b6b0b3b2911d101160991b601c92909101918201527f646174613a696d6167652f7376672b786d6c3b6261736536342c0000000000006029820152835162003290816043840160208801620025ea565b61227d60f01b604392909101918201526045019695505050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815260008251620032e781601d850160208701620025ea565b91909101601d0192915050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516200332e816017850160208801620025ea565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835162003361816028840160208801620025ea565b01602801949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090620033a29083018462002619565b9695505050505050565b600060208284031215620033bf57600080fd5b8151620014bc81620024f8565b634e487b7160e01b600052601260045260246000fd5b600082620033f457620033f4620033cc565b500490565b6000826200340b576200340b620033cc565b500690565b60008160001904831182151516156200342d576200342d62002be3565b500290565b60008162003444576200344462002be3565b50600019019056fe60806040523480156200001157600080fd5b506040516200235d3803806200235d833981016040819052620000349162000132565b828282828260006200004783826200024e565b5060016200005682826200024e565b5050505050505050506200031a565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200008d57600080fd5b81516001600160401b0380821115620000aa57620000aa62000065565b604051601f8301601f19908116603f01168101908282118183101715620000d557620000d562000065565b81604052838152602092508683858801011115620000f257600080fd5b600091505b83821015620001165785820183015181830184015290820190620000f7565b83821115620001285760008385830101525b9695505050505050565b6000806000606084860312156200014857600080fd5b83516001600160401b03808211156200016057600080fd5b6200016e878388016200007b565b945060208601519150808211156200018557600080fd5b5062000194868287016200007b565b604086015190935090506001600160a01b0381168114620001b457600080fd5b809150509250925092565b600181811c90821680620001d457607f821691505b602082108103620001f557634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200024957600081815260208120601f850160051c81016020861015620002245750805b601f850160051c820191505b81811015620002455782815560010162000230565b5050505b505050565b81516001600160401b038111156200026a576200026a62000065565b62000282816200027b8454620001bf565b84620001fb565b602080601f831160018114620002ba5760008415620002a15750858301515b600019600386901b1c1916600185901b17855562000245565b600085815260208120601f198616915b82811015620002eb57888601518255948401946001909101908401620002ca565b50858210156200030a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b612033806200032a6000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c806370a08231116100b8578063bd7b09e41161007c578063bd7b09e41461028f578063c7f758a814610298578063c87b56dd146102b8578063e985e9c5146102cb578063f3caad0314610307578063f64e30b01461033357600080fd5b806370a082311461022d57806371e928af1461024e57806395d89b4114610261578063a22cb46514610269578063b88d4fde1461027c57600080fd5b806323b872dd116100ff57806323b872dd146101cc578063274a827b146101df57806342842e0e146101f257806362564c48146102055780636352211e1461021a57600080fd5b806301ffc9a71461013c57806306fdde0314610164578063081812fc14610179578063095ea7b3146101a457806320c5429b146101b9575b600080fd5b61014f61014a366004611902565b610346565b60405190151581526020015b60405180910390f35b61016c610398565b60405161015b9190611977565b61018c61018736600461198a565b61042a565b6040516001600160a01b03909116815260200161015b565b6101b76101b23660046119bf565b6104c4565b005b6101b76101c736600461198a565b6105d9565b6101b76101da3660046119e9565b6105e7565b61016c6101ed366004611a25565b61062f565b6101b76102003660046119e9565b6106dd565b61020d6106f8565b60405161015b9190611b36565b61018c61022836600461198a565b610a4d565b61024061023b366004611b98565b610ac4565b60405190815260200161015b565b6101b761025c366004611b98565b610b4b565b61016c610b6b565b6101b7610277366004611bb3565b610b7a565b6101b761028a366004611c05565b610b89565b61024060065481565b6102ab6102a636600461198a565b610c0b565b60405161015b9190611ce1565b61016c6102c636600461198a565b610f77565b61014f6102d9366004611cf4565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b61014f610315366004611b98565b6001600160a01b031660009081526007602052604090205460ff1690565b61016c610341366004611b98565b61105f565b60006001600160e01b031982166380ac58cd60e01b148061037757506001600160e01b03198216635b5e139f60e01b145b8061039257506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600080546103a790611d27565b80601f01602080910402602001604051908101604052809291908181526020018280546103d390611d27565b80156104205780601f106103f557610100808354040283529160200191610420565b820191906000526020600020905b81548152906001019060200180831161040357829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166104a85760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b60006104cf82610a4d565b9050806001600160a01b0316836001600160a01b03160361053c5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b606482015260840161049f565b336001600160a01b0382161480610558575061055881336102d9565b6105ca5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606482015260840161049f565b6105d4838361110b565b505050565b6105e4600654611179565b50565b60405162461bcd60e51b815260206004820152601d60248201527f436974697a656e416c7068613a204b65657020796f757220536f756c20000000604482015260640161049f565b33600090815260086020526040902060609061064c838583611daf565b805461065790611d27565b80601f016020809104026020016040519081016040528092919081815260200182805461068390611d27565b80156106d05780601f106106a5576101008083540402835291602001916106d0565b820191906000526020600020905b8154815290600101906020018083116106b357829003601f168201915b5050505050905092915050565b6105d483838360405180602001604052806000815250610b89565b60606009805480602002602001604051908101604052809291908181526020016000905b82821015610a4457838290600052602060002090600702016040518060e00160405290816000820154815260200160018201805461075990611d27565b80601f016020809104026020016040519081016040528092919081815260200182805461078590611d27565b80156107d25780601f106107a7576101008083540402835291602001916107d2565b820191906000526020600020905b8154815290600101906020018083116107b557829003601f168201915b505050505081526020016002820180546107eb90611d27565b80601f016020809104026020016040519081016040528092919081815260200182805461081790611d27565b80156108645780601f1061083957610100808354040283529160200191610864565b820191906000526020600020905b81548152906001019060200180831161084757829003601f168201915b5050505050815260200160038201805461087d90611d27565b80601f01602080910402602001604051908101604052809291908181526020018280546108a990611d27565b80156108f65780601f106108cb576101008083540402835291602001916108f6565b820191906000526020600020905b8154815290600101906020018083116108d957829003601f168201915b5050505050815260200160048201805461090f90611d27565b80601f016020809104026020016040519081016040528092919081815260200182805461093b90611d27565b80156109885780601f1061095d57610100808354040283529160200191610988565b820191906000526020600020905b81548152906001019060200180831161096b57829003601f168201915b505050505081526020016005820180546109a190611d27565b80601f01602080910402602001604051908101604052809291908181526020018280546109cd90611d27565b8015610a1a5780601f106109ef57610100808354040283529160200191610a1a565b820191906000526020600020905b8154815290600101906020018083116109fd57829003601f168201915b50505091835250506006919091015460ff161515602091820152908252600192909201910161071c565b50505050905090565b6000818152600260205260408120546001600160a01b0316806103925760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b606482015260840161049f565b60006001600160a01b038216610b2f5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b606482015260840161049f565b506001600160a01b031660009081526003602052604090205490565b6001600160a01b03811660005260076020526006546105e4908290611214565b6060600180546103a790611d27565b610b85338383611356565b5050565b610b933383611424565b610bf95760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6044820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606482015260840161049f565b610c058484848461151b565b50505050565b610c506040518060e001604052806000801916815260200160608152602001606081526020016060815260200160608152602001606081526020016000151581525090565b60098281548110610c6357610c63611e70565b90600052602060002090600702016040518060e001604052908160008201548152602001600182018054610c9690611d27565b80601f0160208091040260200160405190810160405280929190818152602001828054610cc290611d27565b8015610d0f5780601f10610ce457610100808354040283529160200191610d0f565b820191906000526020600020905b815481529060010190602001808311610cf257829003601f168201915b50505050508152602001600282018054610d2890611d27565b80601f0160208091040260200160405190810160405280929190818152602001828054610d5490611d27565b8015610da15780601f10610d7657610100808354040283529160200191610da1565b820191906000526020600020905b815481529060010190602001808311610d8457829003601f168201915b50505050508152602001600382018054610dba90611d27565b80601f0160208091040260200160405190810160405280929190818152602001828054610de690611d27565b8015610e335780601f10610e0857610100808354040283529160200191610e33565b820191906000526020600020905b815481529060010190602001808311610e1657829003601f168201915b50505050508152602001600482018054610e4c90611d27565b80601f0160208091040260200160405190810160405280929190818152602001828054610e7890611d27565b8015610ec55780601f10610e9a57610100808354040283529160200191610ec5565b820191906000526020600020905b815481529060010190602001808311610ea857829003601f168201915b50505050508152602001600582018054610ede90611d27565b80601f0160208091040260200160405190810160405280929190818152602001828054610f0a90611d27565b8015610f575780601f10610f2c57610100808354040283529160200191610f57565b820191906000526020600020905b815481529060010190602001808311610f3a57829003601f168201915b50505091835250506006919091015460ff16151560209091015292915050565b6000818152600260205260409020546060906001600160a01b0316610ff65760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b606482015260840161049f565b600061100d60408051602081019091526000815290565b9050600081511161102d5760405180602001604052806000815250611058565b806110378461154e565b604051602001611048929190611e86565b6040516020818303038152906040525b9392505050565b6001600160a01b038116600090815260086020526040902080546060919061108690611d27565b80601f01602080910402602001604051908101604052809291908181526020018280546110b290611d27565b80156110ff5780601f106110d4576101008083540402835291602001916110ff565b820191906000526020600020905b8154815290600101906020018083116110e257829003601f168201915b50505050509050919050565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061114082610a4d565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600061118482610a4d565b905061119160008361110b565b6001600160a01b03811660009081526003602052604081208054600192906111ba908490611ecb565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6001600160a01b03821661126a5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161049f565b6000818152600260205260409020546001600160a01b0316156112cf5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161049f565b6001600160a01b03821660009081526003602052604081208054600192906112f8908490611ee2565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b816001600160a01b0316836001600160a01b0316036113b75760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161049f565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6000818152600260205260408120546001600160a01b031661149d5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b606482015260840161049f565b60006114a883610a4d565b9050806001600160a01b0316846001600160a01b031614806114ef57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806115135750836001600160a01b03166115088461042a565b6001600160a01b0316145b949350505050565b61152684848461164f565b611532848484846117eb565b610c055760405162461bcd60e51b815260040161049f90611efa565b6060816000036115755750506040805180820190915260018152600360fc1b602082015290565b8160005b811561159f578061158981611f4c565b91506115989050600a83611f7b565b9150611579565b60008167ffffffffffffffff8111156115ba576115ba611bef565b6040519080825280601f01601f1916602001820160405280156115e4576020820181803683370190505b5090505b8415611513576115f9600183611ecb565b9150611606600a86611f8f565b611611906030611ee2565b60f81b81838151811061162657611626611e70565b60200101906001600160f81b031916908160001a905350611648600a86611f7b565b94506115e8565b826001600160a01b031661166282610a4d565b6001600160a01b0316146116c65760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b606482015260840161049f565b6001600160a01b0382166117285760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161049f565b61173360008261110b565b6001600160a01b038316600090815260036020526040812080546001929061175c908490611ecb565b90915550506001600160a01b038216600090815260036020526040812080546001929061178a908490611ee2565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60006001600160a01b0384163b156118e157604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061182f903390899088908890600401611fa3565b6020604051808303816000875af192505050801561186a575060408051601f3d908101601f1916820190925261186791810190611fe0565b60015b6118c7573d808015611898576040519150601f19603f3d011682016040523d82523d6000602084013e61189d565b606091505b5080516000036118bf5760405162461bcd60e51b815260040161049f90611efa565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611513565b506001949350505050565b6001600160e01b0319811681146105e457600080fd5b60006020828403121561191457600080fd5b8135611058816118ec565b60005b8381101561193a578181015183820152602001611922565b83811115610c055750506000910152565b6000815180845261196381602086016020860161191f565b601f01601f19169290920160200192915050565b602081526000611058602083018461194b565b60006020828403121561199c57600080fd5b5035919050565b80356001600160a01b03811681146119ba57600080fd5b919050565b600080604083850312156119d257600080fd5b6119db836119a3565b946020939093013593505050565b6000806000606084860312156119fe57600080fd5b611a07846119a3565b9250611a15602085016119a3565b9150604084013590509250925092565b60008060208385031215611a3857600080fd5b823567ffffffffffffffff80821115611a5057600080fd5b818501915085601f830112611a6457600080fd5b813581811115611a7357600080fd5b866020828501011115611a8557600080fd5b60209290920196919550909350505050565b805182526000602082015160e06020850152611ab660e085018261194b565b905060408301518482036040860152611acf828261194b565b91505060608301518482036060860152611ae9828261194b565b91505060808301518482036080860152611b03828261194b565b91505060a083015184820360a0860152611b1d828261194b565b91505060c0830151151560c08501528091505092915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015611b8b57603f19888603018452611b79858351611a97565b94509285019290850190600101611b5d565b5092979650505050505050565b600060208284031215611baa57600080fd5b611058826119a3565b60008060408385031215611bc657600080fd5b611bcf836119a3565b915060208301358015158114611be457600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215611c1b57600080fd5b611c24856119a3565b9350611c32602086016119a3565b925060408501359150606085013567ffffffffffffffff80821115611c5657600080fd5b818701915087601f830112611c6a57600080fd5b813581811115611c7c57611c7c611bef565b604051601f8201601f19908116603f01168101908382118183101715611ca457611ca4611bef565b816040528281528a6020848701011115611cbd57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6020815260006110586020830184611a97565b60008060408385031215611d0757600080fd5b611d10836119a3565b9150611d1e602084016119a3565b90509250929050565b600181811c90821680611d3b57607f821691505b602082108103611d5b57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156105d457600081815260208120601f850160051c81016020861015611d885750805b601f850160051c820191505b81811015611da757828155600101611d94565b505050505050565b67ffffffffffffffff831115611dc757611dc7611bef565b611ddb83611dd58354611d27565b83611d61565b6000601f841160018114611e0f5760008515611df75750838201355b600019600387901b1c1916600186901b178355611e69565b600083815260209020601f19861690835b82811015611e405786850135825560209485019460019092019101611e20565b5086821015611e5d5760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b634e487b7160e01b600052603260045260246000fd5b60008351611e9881846020880161191f565b835190830190611eac81836020880161191f565b01949350505050565b634e487b7160e01b600052601160045260246000fd5b600082821015611edd57611edd611eb5565b500390565b60008219821115611ef557611ef5611eb5565b500190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b600060018201611f5e57611f5e611eb5565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600082611f8a57611f8a611f65565b500490565b600082611f9e57611f9e611f65565b500690565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611fd69083018461194b565b9695505050505050565b600060208284031215611ff257600080fd5b8151611058816118ec56fea26469706673582212204c76f3680ff61bcb039a2ba22c1300c74ff3a5492e2996b075570c20602be43d64736f6c634300080f00334142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220e3d1e334700fcfb85d1fd39d9c9f87436e34a2f057623660f75d5132a6991d9764736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "The returned value may be a base64 encoded data URI or an API URL."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "tokenURI(uint256)": {
        "notice": "Given a token ID and seed, construct a token URI for an official Nouns DAO noun."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 418,
        "contract": "contracts/CitizenV1.sol:CitizenV1",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 420,
        "contract": "contracts/CitizenV1.sol:CitizenV1",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 424,
        "contract": "contracts/CitizenV1.sol:CitizenV1",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 428,
        "contract": "contracts/CitizenV1.sol:CitizenV1",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 432,
        "contract": "contracts/CitizenV1.sol:CitizenV1",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 438,
        "contract": "contracts/CitizenV1.sol:CitizenV1",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 24,
        "contract": "contracts/CitizenV1.sol:CitizenV1",
        "label": "_roles",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 2114,
        "contract": "contracts/CitizenV1.sol:CitizenV1",
        "label": "totalCitizens",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2118,
        "contract": "contracts/CitizenV1.sol:CitizenV1",
        "label": "_isCitizen",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2122,
        "contract": "contracts/CitizenV1.sol:CitizenV1",
        "label": "_citizenDID",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_string_storage)"
      },
      {
        "astId": 2126,
        "contract": "contracts/CitizenV1.sol:CitizenV1",
        "label": "_citizenAlias",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 2164,
        "contract": "contracts/CitizenV1.sol:CitizenV1",
        "label": "dao",
        "offset": 0,
        "slot": "11",
        "type": "t_struct(DAOStorage)2150_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(DAOStorage)2150_storage": {
        "encoding": "inplace",
        "label": "struct CitizenV1.DAOStorage",
        "members": [
          {
            "astId": 2146,
            "contract": "contracts/CitizenV1.sol:CitizenV1",
            "label": "founders",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 2149,
            "contract": "contracts/CitizenV1.sol:CitizenV1",
            "label": "guilds",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/CitizenV1.sol:CitizenV1",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/CitizenV1.sol:CitizenV1",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}